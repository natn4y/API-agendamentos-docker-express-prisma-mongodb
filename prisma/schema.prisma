// schema.prisma

//? -----> CONFIGURAÇÕES DO PRISMA
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// model Clients {
//   id         String   @id @default(uuid()) @map("_id")
//   username   String   @unique
//   password   String
//   created_at DateTime @default(now())
//   isAdmin    Boolean

//   @@map("clients")
// }

//! -----> CLIENTE

model Cliente {
  id             String @id @default(uuid()) @map("_id")
  nome           String
  telefone       String
  email          String
  status         String @default("A")
  sexo           String @default("M")
  dataNascimento String
  foto           String
  senha          String
  documentoId    String
  enderecoId     String

  salaoClient SalaoClient?
  agendamento Agendamento?

  documento Documento @relation(fields: [documentoId], references: [id])
  endereco  Endereco  @relation(fields: [enderecoId], references: [id])

  @@map("cliente")
}

model Documento {
  id      String    @id @default(uuid()) @map("_id")
  tipo    String
  numero  String
  cliente Cliente[]

  @@map("documento")
}

model Endereco {
  id           String    @id @default(uuid()) @map("_id")
  pais         String
  numero       String
  cep          String
  uf           String
  cidade       String
  cliente      Cliente[]
  dataCadastro DateTime  @default(now())

  salao Salao?

  @@map("endereco")
}

//! -----> SERVICO

model Salao {
  id           String   @id @default(uuid()) @map("_id")
  nome         String   @unique
  foto         String?
  capa         String?
  email        String?
  senha        String?
  telefone     String?
  dataCadastro DateTime @default(now())

  enderecoId       String?           @unique @default(uuid())
  salaoColaborador SalaoColaborador?
  salaoClient      SalaoClient?
  agendamento      Agendamento?

  endereco Endereco?        @relation(fields: [enderecoId], references: [id])
  geo      Geolocalization?

  servicos Servico[] @relation("SalaoToServico")
  horarios Horario[] @relation("SalaoToHorario")

  @@map("salao")
}

model Geolocalization {
  id          String  @id @default(uuid()) @map("_id")
  tipo        String
  coordinates Float[]
  salaoId     String  @unique

  salao Salao @relation(fields: [salaoId], references: [id])

  @@map("geolocalization")
}

//! -----> COLABORADOR

model Colaborador {
  id                 String              @id @default(uuid()) @map("_id")
  nome               String
  telefone           String
  email              String
  senha              String
  foto               String
  dataNascimento     String
  sexo               String              @default("M")
  status             String              @default("A")
  ContaBancariaId    String              @unique
  dataCadastro       DateTime            @default(now())
  recipientId        String              @unique
  horarioId          String?
  colaboradorId      String?
  especialidadesId   String[]            @unique
  vinculo            String
  salaoColaborador   SalaoColaborador?
  colaboradorServico ColaboradorServico?
  agendamento        Agendamento?

  especialidades Servico       @relation(fields: [especialidadesId], references: [id])
  horario        Horario?
  contaBancaria  ContaBancaria @relation(fields: [ContaBancariaId], references: [id])
  recipient      Recipient     @relation(fields: [recipientId], references: [id])

  @@map("colaborador")
}

model ContaBancaria {
  id      String   @id @default(uuid()) @map("_id")
  titular String
  cpfcnpj String
  banco   String
  tipo    String
  agencia String
  numero  DateTime
  dv      String   @default("M")

  colaborador Colaborador?

  @@map("contaBancaria")
}

model Recipient {
  id           String   @id @default(uuid()) @map("_id")
  dataCadastro DateTime @default(now())

  colaborador Colaborador?

  @@map("recipient")
}

//! -----> SERVICO

model Servico {
  id                 String              @id @default(uuid()) @map("_id")
  salaoId            String
  titulo             String
  preco              Int
  comissao           Float // % de comissão sobre o preço
  recorrencia        Int // Período de refação do serviço em dias
  duracao            Int // Duração em minutos
  descricao          String
  status             String
  dataCadastro       DateTime            @default(now())
  horarioId          String?
  colaboradorServico ColaboradorServico?
  agendamento        Agendamento?

  salao       Salao        @relation("SalaoToServico", fields: [salaoId], references: [id])
  horario     Horario?
  Colaborador Colaborador?

  @@map("servico")
}

model Horario {
  id               String   @id @default(uuid()) @map("_id")
  salaoId          String
  especialidadesId String[] @unique
  colaboradoresId  String[] @unique
  dias             Int[]
  inicio           String
  fim              String

  salao          Salao       @relation("SalaoToHorario", fields: [salaoId], references: [id])
  especialidades Servico     @relation(fields: [especialidadesId], references: [id])
  colaboradores  Colaborador @relation(fields: [colaboradoresId], references: [id])

  @@map("horario")
}

//! -----> SALAO COLABORADOR

model SalaoColaborador {
  id            String   @id @default(uuid()) @map("_id")
  salaoId       String   @unique
  colaboradorId String   @unique
  status        String

  dataCadastro  DateTime @default(now())

  salao       Salao       @relation(fields: [salaoId], references: [id])
  colaborador Colaborador @relation(fields: [colaboradorId], references: [id])

  @@map("salaoColaborador")
}

//! -----> COLABORADOR SERVICO

model ColaboradorServico {
  id            String   @id @default(uuid()) @map("_id")
  colaboradorId String   @unique
  servicoId     String   @unique
  status        String
  dataCadastro  DateTime @default(now())

  colaborador Colaborador @relation(fields: [colaboradorId], references: [id])
  servico     Servico     @relation(fields: [servicoId], references: [id])

  @@map("colaboradorServico")
}

//! -----> SALAO CLIENTE

model SalaoClient {
  id           String   @id @default(uuid()) @map("_id")
  salaoId      String   @unique
  clientId     String   @unique
  status       String
  dataCadastro DateTime @default(now())

  salao  Salao   @relation(fields: [salaoId], references: [id])
  client Cliente @relation(fields: [clientId], references: [id])

  @@map("salaoclient")
}

//! -----> AGENDAMENTO

model Agendamento {
  id            String   @id @default(uuid()) @map("_id")
  salaoId       String   @unique
  clientId      String   @unique
  servicoId     String   @unique
  colaboradorId String   @unique
  status        String
  dataCadastro  DateTime @default(now())
  data          String
  comissao      Float
  valor         Float
  transactionId String

  salao       Salao       @relation(fields: [salaoId], references: [id])
  client      Cliente     @relation(fields: [clientId], references: [id])
  servico     Servico     @relation(fields: [servicoId], references: [id])
  colaborador Colaborador @relation(fields: [colaboradorId], references: [id])

  @@map("agendamento")
}
