// schema.prisma

//? -----> CONFIGURAÇÕES DO PRISMA
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// model Clients {
//   id         String   @id @default(uuid()) @map("_id")
//   username   String   @unique
//   password   String
//   created_at DateTime @default(now())
//   isAdmin    Boolean

//   @@map("clients")
// }

//! -----> CLIENTE

model Clientes {
  id             String @id @default(uuid()) @map("_id")
  nome           String
  telefone       String
  email          String
  status         String @default("A")
  sexo           String @default("M")
  dataNascimento String
  foto           String
  senha          String
  documentoId    String
  enderecoId     String

  salaoClient salao_Clientes?
  agendamentos Agendamentos?

  documentos Documentos @relation(fields: [documentoId], references: [id])
  enderecos  Enderecos  @relation(fields: [enderecoId], references: [id])

  @@map("clientes")
}

model Documentos {
  id      String    @id @default(uuid()) @map("_id")
  tipo    String
  numero  String
  clientes Clientes[]

  @@map("documentos")
}

model Enderecos {
  id           String    @id @default(uuid()) @map("_id")
  pais         String
  numero       String
  cep          String
  uf           String
  cidade       String
  clientes      Clientes[]
  dataCadastro DateTime  @default(now())

  saloes Saloes?

  @@map("enderecos")
}

//! -----> SERVICO

model Saloes {
  id           String   @id @default(uuid()) @map("_id")
  nome         String   @unique
  foto         String?
  capa         String?
  email        String?
  senha        String?
  telefone     String?
  dataCadastro DateTime @default(now())

  enderecoId       String?           @unique @default(uuid())
  salao_colaboradores salao_colaboradores?
  salaoClient      salao_Clientes?
  agendamentos      Agendamentos?

  enderecos Enderecos?        @relation(fields: [enderecoId], references: [id])
  geo      Geolocalizations?

  servicos Servicos[] @relation("SalaoToServico")
  horarios Horario[] @relation("SalaoToHorario")

  @@map("saloes")
}

model Geolocalizations {
  id          String  @id @default(uuid()) @map("_id")
  tipo        String
  coordinates Float[]
  salaoId     String  @unique

  saloes Saloes @relation(fields: [salaoId], references: [id])

  @@map("geolocalizations")
}

//! -----> COLABORADOR

model Colaboradores {
  id                 String              @id @default(uuid()) @map("_id")
  nome               String
  telefone           String
  email              String
  senha              String
  foto               String
  dataNascimento     String
  sexo               String              @default("M")
  status             String              @default("A")
  ContaBancariaId    String              @unique
  dataCadastro       DateTime            @default(now())
  recipientId        String              @unique
  horarioId          String?
  colaboradorId      String?
  especialidadesId   String[]            @unique
  vinculo            String
  salao_colaboradores   salao_colaboradores?
  colaboradores_servicos Colaboradores_servicos?
  agendamentos        Agendamentos?

  especialidades Servicos       @relation(fields: [especialidadesId], references: [id])
  horario        Horario?
  conta_bancaria  Conta_bancaria @relation(fields: [ContaBancariaId], references: [id])
  recipient      Recipient     @relation(fields: [recipientId], references: [id])

  @@map("colaboradores")
}

model Conta_bancaria {
  id      String   @id @default(uuid()) @map("_id")
  titular String
  cpfcnpj String
  banco   String
  tipo    String
  agencia String
  numero  DateTime
  dv      String   @default("M")

  colaboradores Colaboradores?

  @@map("conta_bancaria")
}

model Recipient {
  id           String   @id @default(uuid()) @map("_id")
  dataCadastro DateTime @default(now())

  colaboradores Colaboradores?

  @@map("recipient")
}

//! -----> SERVICO

model Servicos {
  id                 String              @id @default(uuid()) @map("_id")
  salaoId            String
  titulo             String
  preco              Int
  comissao           Float // % de comissão sobre o preço
  recorrencia        Int // Período de refação do serviço em dias
  duracao            Int // Duração em minutos
  descricao          String
  status             String
  dataCadastro       DateTime            @default(now())
  horarioId          String?
  colaboradores_servicos Colaboradores_servicos?
  agendamentos        Agendamentos?

  saloes       Saloes        @relation("SalaoToServico", fields: [salaoId], references: [id])
  horario     Horario?
  Colaboradores Colaboradores?

  @@map("servicos")
}

model Horario {
  id               String   @id @default(uuid()) @map("_id")
  salaoId          String
  especialidadesId String[] @unique
  colaboradoresId  String[] @unique
  dias             Int[]
  inicio           String
  fim              String

  saloes          Saloes       @relation("SalaoToHorario", fields: [salaoId], references: [id])
  especialidades Servicos     @relation(fields: [especialidadesId], references: [id])
  colaboradores  Colaboradores @relation(fields: [colaboradoresId], references: [id])

  @@map("horario")
}

//! -----> SALAO COLABORADOR

model salao_colaboradores {
  id            String   @id @default(uuid()) @map("_id")
  salaoId       String   @unique
  colaboradorId String   @unique
  status        String

  dataCadastro  DateTime @default(now())

  saloes       Saloes       @relation(fields: [salaoId], references: [id])
  colaboradores Colaboradores @relation(fields: [colaboradorId], references: [id])

  @@map("salao_colaboradores")
}

//! -----> COLABORADOR SERVICO

model Colaboradores_servicos {
  id            String   @id @default(uuid()) @map("_id")
  colaboradorId String   @unique
  servicoId     String   @unique
  status        String
  dataCadastro  DateTime @default(now())

  colaboradores Colaboradores @relation(fields: [colaboradorId], references: [id])
  servicos     Servicos     @relation(fields: [servicoId], references: [id])

  @@map("colaboradores_servicos")
}

//! -----> SALAO CLIENTE

model salao_Clientes {
  id           String   @id @default(uuid()) @map("_id")
  salaoId      String   @unique
  clientId     String   @unique
  status       String
  dataCadastro DateTime @default(now())

  saloes  Saloes   @relation(fields: [salaoId], references: [id])
  client Clientes @relation(fields: [clientId], references: [id])

  @@map("salao_clientes")
}

//! -----> AGENDAMENTO

model Agendamentos {
  id            String   @id @default(uuid()) @map("_id")
  salaoId       String   @unique
  clientId      String   @unique
  servicoId     String   @unique
  colaboradorId String   @unique
  status        String
  dataCadastro  DateTime @default(now())
  data          String
  comissao      Float
  valor         Float
  transactionId String

  saloes       Saloes       @relation(fields: [salaoId], references: [id])
  client      Clientes     @relation(fields: [clientId], references: [id])
  servicos     Servicos     @relation(fields: [servicoId], references: [id])
  colaboradores Colaboradores @relation(fields: [colaboradorId], references: [id])

  @@map("agendamentos")
}
