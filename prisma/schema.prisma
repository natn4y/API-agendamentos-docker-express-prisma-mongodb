// schema.prisma

//? -----> CONFIGURAÇÕES DO PRISMA
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// model Clients {
//   id         String   @id @default(uuid()) @map("_id")
//   username   String   @unique
//   password   String
//   created_at DateTime @default(now())
//   isAdmin    Boolean

//   @@map("clients")
// }

//! -----> CLIENTE

model Clients {
  id             String  @id @default(uuid()) @map("_id")
  nome           String
  telefone       String
  email          String
  status         String  @default("Ativo")
  sexo           String
  dataNascimento String
  foto           String
  senha          String
  documentoId    String?
  enderecoId     String?

  salaoClient salao_Clientes[]
  agendamento Agendamento[]    @relation("AgendamentoToClients")

  Documents Documents[]
  Addresses Addresses[]

  @@map("clients")
}

model Documents {
  id       String @id @default(uuid()) @map("_id")
  clientId String
  tipo     String
  numero   String

  clients Clients @relation(fields: [clientId], references: [id])

  @@map("documents")
}

model Addresses {
  id           String   @id @default(uuid()) @map("_id")
  pais         String
  numero       String
  cep          String
  uf           String
  cidade       String
  rua          String
  clientId     String?
  salonId      String?
  dataCadastro DateTime @default(now())

  salons  Salons?  @relation(fields: [salonId], references: [id])
  clients Clients? @relation(fields: [clientId], references: [id])

  @@map("addresses")
}

//! -----> SERVICO

model Geolocalizations {
  id          String  @id @default(uuid()) @map("_id")
  tipo        String
  coordinates Float[]
  salaoId     String  @unique

  salons Salons @relation(fields: [salaoId], references: [id])

  @@map("geolocalizations")
}

//! -----> COLABORADOR

model Relationships {
  id            String          @id @default(uuid()) @map("_id")
  Collaborators Collaborators[]

  @@map("relationships")
}

model Conta_bancaria {
  id             String  @id @default(uuid()) @map("_id")
  titular        String
  cpfcnpj        String
  banco          String
  tipo           String
  agencia        String
  numero         String
  dv             String
  collaboratorId String? @map("colaboradorId")

  collaborator Collaborators? @relation(fields: [collaboratorId], references: [id])

  @@map("conta_bancaria")
}

model Recipient {
  id           String   @id @default(uuid()) @map("_id")
  dataCadastro DateTime @default(now())
  salaoId      String   @unique

  salons        Salons         @relation(fields: [salaoId], references: [id])
  collaborators Collaborators? @relation(fields: [id], references: [id])

  @@map("recipient")
}

//! -----> SERVICO

model Salons {
  id                  String                @id @default(uuid()) @map("_id")
  nome                String                @unique
  foto                String?
  capa                String?
  email               String?
  senha               String?
  telefone            String?
  dataCadastro        DateTime              @default(now())
  recipientId         String
  enderecoId          String?               @default(uuid())
  salon_collaborators salon_collaborators[]
  salaoClient         salao_Clientes[]
  agendamento         Agendamento[]         @relation("AgendamentoToSalons")

  geo Geolocalizations?

  recipient Recipient?

  services              Services[]              @relation("SalaoToServico")
  horarios              Horario[]               @relation("SalaoToHorario")
  Addresses             Addresses[]
  Collaborator_services Collaborator_services[]

  @@map("salons")
}

//! -----> SALAO COLABORADOR

model Services {
  id                    String                  @id @default(uuid()) @map("_id")
  salaoId               String
  titulo                String
  preco                 Int
  comissao              Float // % de comissão sobre o preço
  recorrencia           Int // Período de refação do serviço em dias
  duracao               String // Duração em minutos
  descricao             String
  status                String
  dataCadastro          DateTime                @default(now())
  horarioId             String?
  collaborator_services Collaborator_services[]
  agendamento           Agendamento[]           @relation("AgendamentoToServices")

  salons          Salons         @relation("SalaoToServico", fields: [salaoId], references: [id])
  Collaborators   Collaborators? @relation(fields: [collaboratorsId], references: [id])
  collaboratorsId String?

  @@map("services")
}

model Horario {
  id                String   @id @default(uuid()) @map("_id")
  salaoId           String
  especialidadesIds String[]
  colaboradoresIds  String[]
  dias              Int[]
  inicio            String
  fim               String

  salons        Salons          @relation("SalaoToHorario", fields: [salaoId], references: [id])
  Collaborators Collaborators[]

  @@map("horario")
}

model Collaborators {
  id                String   @id @default(uuid()) @map("_id")
  nome              String
  telefone          String
  email             String
  senha             String
  foto              String
  dataNascimento    String
  sexo              String
  status            String   @default("Ativo")
  contaBancariaId   String   @unique
  dataCadastro      DateTime @default(now())
  recipientId       String?
  horarioId         String?
  colaboradorId     String?
  vinculo           String
  vinculoId         String?
  salaoId           String?
  especialidadesIds String[]

  salon_collaborators   salon_collaborators[]
  collaborator_services Collaborator_services[]
  agendamento           Agendamento[]           @relation("AgendamentoToCollaborators")

  relationships Relationships? @relation(fields: [vinculoId], references: [id])

  horario        Horario?         @relation(fields: [horarioId], references: [id])
  recipient      Recipient?
  conta_bancaria Conta_bancaria[]
  Services       Services[]

  @@map("collaborators")
}

model salon_collaborators {
  id            String @id @default(uuid()) @map("_id")
  salaoId       String
  colaboradorId String
  status        String

  dataCadastro DateTime @default(now())

  salon        Salons         @relation(fields: [salaoId], references: [id])
  collaborator Collaborators? @relation(fields: [colaboradorId], references: [id])

  @@map("salon_collaborators")
}

//! -----> COLABORADOR SERVICO

model Collaborator_services {
  id            String   @id @default(uuid()) @map("_id")
  colaboradorId String
  servicoId     String
  status        String
  dataCadastro  DateTime @default(now())
  salaoId       String?

  collaborators Collaborators @relation(fields: [colaboradorId], references: [id])
  services      Services      @relation(fields: [servicoId], references: [id])
  salons        Salons?       @relation(fields: [salaoId], references: [id])

  @@map("collaborator_services")
}

//! -----> SALAO CLIENTE

model salao_Clientes {
  id           String   @id @default(uuid()) @map("_id")
  salaoId      String   @unique
  clientId     String   @unique
  status       String
  dataCadastro DateTime @default(now())

  salons Salons  @relation(fields: [salaoId], references: [id])
  client Clients @relation(fields: [clientId], references: [id])

  @@map("salon_clients")
}

//! -----> AGENDAMENTO

model Agendamento {
  id            String   @id @default(uuid()) @map("_id")
  salaoId       String
  clientId      String
  servicoId     String
  colaboradorId String
  status        String
  dataCadastro  DateTime @default(now())
  data          String
  comissao      Float
  valor         Float
  transactionId String

  salons        Salons        @relation("AgendamentoToSalons", fields: [salaoId], references: [id])
  client        Clients       @relation("AgendamentoToClients", fields: [clientId], references: [id])
  services      Services      @relation("AgendamentoToServices", fields: [servicoId], references: [id])
  collaborators Collaborators @relation("AgendamentoToCollaborators", fields: [colaboradorId], references: [id])

  @@map("agendamento")
}
