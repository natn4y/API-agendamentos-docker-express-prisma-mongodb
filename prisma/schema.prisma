// schema.prisma

//? -----> CONFIGURAÇÕES DO PRISMA
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// model Clients {
//   id         String   @id @default(uuid()) @map("_id")
//   username   String   @unique
//   password   String
//   created_at DateTime @default(now())
//   isAdmin    Boolean

//   @@map("clients")
// }

//! -----> CLIENTE

model Clients {
  id             String @id @default(uuid()) @map("_id")
  nome           String
  telefone       String
  email          String
  status         String @default("A")
  sexo           String @default("M")
  dataNascimento String
  foto           String
  senha          String
  documentoId    String
  enderecoId     String

  salaoClient  salao_Clientes?
  agendamentos Agendamentos?

  Documents Documents[]
  Addresses Addresses[]

  @@map("clients")
}

model Documents {
  id       String @id @default(uuid()) @map("_id")
  clientId String
  tipo     String
  numero   String

  clients Clients @relation(fields: [clientId], references: [id])

  @@map("documents")
}

model Addresses {
  id           String   @id @default(uuid()) @map("_id")
  pais         String
  numero       String
  cep          String
  uf           String
  cidade       String
  rua          String
  clientId     String?
  salonId      String?
  dataCadastro DateTime @default(now())

  salons  Salons?  @relation(fields: [salonId], references: [id])
  clients Clients? @relation(fields: [clientId], references: [id])

  @@map("addresses")
}

//! -----> SERVICO

model Salons {
  id           String   @id @default(uuid()) @map("_id")
  nome         String   @unique
  foto         String?
  capa         String?
  email        String?
  senha        String?
  telefone     String?
  dataCadastro DateTime @default(now())

  enderecoId          String?              @unique @default(uuid())
  salon_collaborators salon_collaborators?
  salaoClient         salao_Clientes?
  agendamentos        Agendamentos?

  geo Geolocalizations?

  services  Services[]  @relation("SalaoToServico")
  horarios  Horario[]   @relation("SalaoToHorario")
  Addresses Addresses[]

  @@map("salons")
}

model Geolocalizations {
  id          String  @id @default(uuid()) @map("_id")
  tipo        String
  coordinates Float[]
  salaoId     String  @unique

  salons Salons @relation(fields: [salaoId], references: [id])

  @@map("geolocalizations")
}

//! -----> COLABORADOR

model Relationships {
  id            String          @id @default(uuid()) @map("_id")
  Collaborators Collaborators[]

  @@map("relationships")
}

model Collaborators {
  id               String   @id @default(uuid()) @map("_id")
  nome             String
  telefone         String
  email            String
  senha            String
  foto             String
  dataNascimento   String
  sexo             String   @default("M")
  status           String   @default("A")
  ContaBancariaId  String   @unique
  dataCadastro     DateTime @default(now())
  recipientId      String   @unique
  horarioId        String?
  colaboradorId    String?
  especialidadesId String[] @unique
  vinculo          String
  vinculoId        String

  salon_collaborators   salon_collaborators?
  collaborator_services Collaborator_services?
  agendamentos          Agendamentos?

  relationships  Relationships? @relation(fields: [vinculoId], references: [id])
  especialidades Services       @relation(fields: [especialidadesId], references: [id])
  horario        Horario?
  conta_bancaria Conta_bancaria @relation(fields: [ContaBancariaId], references: [id])
  recipient      Recipient      @relation(fields: [recipientId], references: [id])

  @@map("collaborators")
}

model Conta_bancaria {
  id      String @id @default(uuid()) @map("_id")
  titular String
  cpfcnpj String
  banco   String
  tipo    String
  agencia String
  numero  String
  dv      String @default("M")

  collaborators Collaborators?

  @@map("conta_bancaria")
}

model Recipient {
  id           String   @id @default(uuid()) @map("_id")
  dataCadastro DateTime @default(now())

  collaborators Collaborators?

  @@map("recipient")
}

//! -----> SERVICO

model Services {
  id                    String                 @id @default(uuid()) @map("_id")
  salaoId               String
  titulo                String
  preco                 Int
  comissao              Float // % de comissão sobre o preço
  recorrencia           Int // Período de refação do serviço em dias
  duracao               Int // Duração em minutos
  descricao             String
  status                String
  dataCadastro          DateTime               @default(now())
  horarioId             String?
  collaborator_services Collaborator_services?
  agendamentos          Agendamentos?

  salons        Salons         @relation("SalaoToServico", fields: [salaoId], references: [id])
  horario       Horario?
  Collaborators Collaborators?

  @@map("services")
}

model Horario {
  id               String   @id @default(uuid()) @map("_id")
  salaoId          String
  especialidadesId String[] @unique
  colaboradoresId  String[] @unique
  dias             Int[]
  inicio           String
  fim              String

  salons         Salons        @relation("SalaoToHorario", fields: [salaoId], references: [id])
  especialidades Services      @relation(fields: [especialidadesId], references: [id])
  collaborators  Collaborators @relation(fields: [colaboradoresId], references: [id])

  @@map("horario")
}

//! -----> SALAO COLABORADOR

model salon_collaborators {
  id            String @id @default(uuid()) @map("_id")
  salaoId       String @unique
  colaboradorId String @unique
  status        String

  dataCadastro DateTime @default(now())

  salons        Salons        @relation(fields: [salaoId], references: [id])
  collaborators Collaborators @relation(fields: [colaboradorId], references: [id])

  @@map("salon_collaborators")
}

//! -----> COLABORADOR SERVICO

model Collaborator_services {
  id            String   @id @default(uuid()) @map("_id")
  colaboradorId String   @unique
  servicoId     String   @unique
  status        String
  dataCadastro  DateTime @default(now())

  collaborators Collaborators @relation(fields: [colaboradorId], references: [id])
  services      Services      @relation(fields: [servicoId], references: [id])

  @@map("collaborator_services")
}

//! -----> SALAO CLIENTE

model salao_Clientes {
  id           String   @id @default(uuid()) @map("_id")
  salaoId      String   @unique
  clientId     String   @unique
  status       String
  dataCadastro DateTime @default(now())

  salons Salons  @relation(fields: [salaoId], references: [id])
  client Clients @relation(fields: [clientId], references: [id])

  @@map("salon_clients")
}

//! -----> AGENDAMENTO

model Agendamentos {
  id            String   @id @default(uuid()) @map("_id")
  salaoId       String   @unique
  clientId      String   @unique
  servicoId     String   @unique
  colaboradorId String   @unique
  status        String
  dataCadastro  DateTime @default(now())
  data          String
  comissao      Float
  valor         Float
  transactionId String

  salons        Salons        @relation(fields: [salaoId], references: [id])
  client        Clients       @relation(fields: [clientId], references: [id])
  services      Services      @relation(fields: [servicoId], references: [id])
  collaborators Collaborators @relation(fields: [colaboradorId], references: [id])

  @@map("agendamentos")
}
